---
stages:
  # - source test
  - build
  - vagrant package
  - upload

variables:
  CLOUD_IMAGE_BUILD_ID: ${CI_PROJECT_NAMESPACE}-${CI_COMMIT_REF_SLUG}
  GIT_DEPTH: "1"

before_script:
  - apt-get update
  - >
    apt-get install --no-install-recommends -y python3-libcloud 
    python3-marshmallow python3-yaml qemu-utils sudo xz-utils
  - |
    if [ "$CI_DISPOSABLE_ENVIRONMENT" ]; then
      # Workaround unsupported SEEK_HOLE in overlayfs (Docker default)
      mount -t tmpfs none /tmp
    fi

# test flake8:
#   stage: source test
#   image: debian:buster
#   script:
#     - >
#       apt-get install --no-install-recommends -y
#       python3-flake8
#     - python3 -m flake8

# test mypy:
#   stage: source test
#   image: debian:bullseye
#   script:
#     - >
#       apt-get install --no-install-recommends -y
#       mypy
#     - mypy src
#   allow_failure: true

# test package:
#   stage: source test
#   image: debian:buster
#   script:
#     - apt-get build-dep -y ./
#     - >
#       apt-get install --no-install-recommends -y
#       lintian
#     - DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -us -uc
#     - lintian ../*.changes

# test pytest:
#   stage: source test
#   image: debian:buster
#   script:
#     - >
#       apt-get install --no-install-recommends -y
#       python3-pytest python3-pytest-cov
#     - >
#       PYTHONPATH=src
#       py.test-3
#       -vrxXs
#       --color=yes
#       --cov=src --cov-report=term --cov-report=html:coverage
#       --junit-xml=junit.xml
#       tests
#   artifacts:
#     paths:
#       - coverage/
#     reports:
#       junit: junit.xml

# test pytest latest:
#   stage: source test
#   image: python:slim
#   before_script:
#     - pip install -e .
#   script:
#     - python3 ./setup.py pytest

.build:
  stage: build
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      binfmt-support ca-certificates debsums dosfstools fai-server
      fai-setup-storage python3-pytest qemu-user-static sudo
      udev
    - |
      if [ "$CI_DISPOSABLE_ENVIRONMENT" ]; then
        # Some of our build environments run with SELinux enabled, make sure it is detected by all the tools
        if [ -d /sys/fs/selinux ]; then mount -t selinuxfs none /sys/fs/selinux; mkdir -p /etc/selinux; touch /etc/selinux/config; fi
      fi
    - >
      echo $CI_PIPELINE_IID
      echo debian-cloud-images build
      --build-id ${CLOUD_IMAGE_BUILD_ID}
      --build-type official
      ${CLOUD_RELEASE} ${CLOUD_VENDOR} ${CLOUD_ARCH}
    - >
      ./bin/debian-cloud-images build
      --build-id ${CLOUD_IMAGE_BUILD_ID}
      --build-type official
      ${CLOUD_RELEASE} ${CLOUD_VENDOR} ${CLOUD_ARCH}
    - 'xz -vk5T0 *.raw'
  variables:
    CLOUD_ARCH: amd64
  artifacts:
    name: debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}
    expire_in: 2 days
    paths:
      - '*.raw.xz'
      - '*.build.json'
      - '*.info'
    reports:
      junit: '*.build.junit.xml'
  allow_failure: true

####
# Builds for developer uploads pushes
#
# Builds are run if
# - it is requested by setting $BUILD_VAGRANT
# - the manual jobs are started.
####

.vagrant build:
  extends: .build
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_VAGRANT'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual

vagrant testing build:
 extends: .vagrant build
 variables:
   CLOUD_RELEASE: testing
   CLOUD_VENDOR: vagrant

vagrantcontrib testing build:
 extends: .vagrant build
 variables:
   CLOUD_RELEASE: testing
   CLOUD_VENDOR: vagrantcontrib

.virtualbox box:
  stage: vagrant package
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_VAGRANT'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      libxml-writer-perl libguestfs-perl uuid-runtime linux-image-amd64
    - 'xz -vd debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-official-*.raw.xz'
    - >
      echo utils/vagrant/libvirt/create-vagrant-libvirt-box 
      debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-official-$(date '+%Y%m%d')-${CI_PIPELINE_IID}.raw
    - >
      utils/vagrant/libvirt/create-vagrant-libvirt-box 
      debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-official-$(date '+%Y%m%d')-${CI_PIPELINE_IID}.raw
  variables:
    CLOUD_ARCH: amd64
  artifacts:
    name: debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-virtualbox
    expire_in: 2 days
    paths:
      # this fails with Uploading artifacts to coordinator... too large archive (HTTP 413)
      #- '*.box'
      - '*.build.json'
      - '*.info'

.libvirt box:
  stage: vagrant package
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_VAGRANT'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual
  image: debian:buster
  script:
    - 'xz -vd debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-official-*.raw.xz'
    - >
      echo utils/vagrant/libvirt/create-vagrant-libvirt-box 
      debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-official-$(date '+%Y%m%d')-${CI_PIPELINE_IID}.raw
    - > 
      utils/vagrant/libvirt/create-vagrant-libvirt-box 
      debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-official-$(date '+%Y%m%d')-${CI_PIPELINE_IID}.raw
  variables:
    CLOUD_ARCH: amd64
  artifacts:
    name: debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}-libvirt
    expire_in: 2 days
    paths:
      # this fails with Uploading artifacts to coordinator... too large archive (HTTP 413)
      #- '*.box'
      - '*.build.json'
      - '*.info'

vagrant testing virtualbox box:
  extends: .virtualbox box
  variables:
    CLOUD_RELEASE: testing
    CLOUD_VENDOR: vagrant

vagrantcontrib testing virtualbox box:
  extends: .virtualbox box
  variables:
    CLOUD_RELEASE: testing
    CLOUD_VENDOR: vagrantcontrib

vagrant testing libvirt box:
  extends: .libvirt box
  variables:
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: vagrant
