---
stages:
  - source test
  - build
  - vendor upload
  - upload

variables:
  CLOUD_IMAGE_BUILD_ID: ${CI_PROJECT_NAMESPACE}-${CI_COMMIT_REF_SLUG}
  GIT_DEPTH: "1"

before_script:
  - apt-get update
  - apt-get install --no-install-recommends -y python3-libcloud python3-marshmallow python3-yaml qemu-utils sudo
  - |
    if [ "$CI_DISPOSABLE_ENVIRONMENT" ]; then
      # Workaround unsupported SEEK_HOLE in overlayfs (Docker default)
      mount -t tmpfs none /tmp
    fi

test flake8:
  stage: source test
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      python3-flake8
    - python3 -m flake8

test mypy:
  stage: source test
  image: debian:bullseye
  script:
    - >
      apt-get install --no-install-recommends -y
      mypy
    - mypy src
  allow_failure: true

test package:
  stage: source test
  image: debian:buster
  script:
    - apt-get build-dep -y ./
    - >
      apt-get install --no-install-recommends -y
      lintian
    - DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -us -uc
    - lintian ../*.changes

test pytest:
  stage: source test
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      python3-pytest python3-pytest-cov
    - >
      PYTHONPATH=src
      py.test-3
      -vrxXs
      --color=yes
      --cov=src --cov-report=term --cov-report=html:coverage
      --junit-xml=junit.xml
      tests
  artifacts:
    paths:
      - coverage/
    reports:
      junit: junit.xml

test pytest latest:
  stage: source test
  image: python:slim
  before_script:
    - pip install -e .
  script:
    - python3 ./setup.py pytest

.build:
  stage: build
  image: debian:buster
  script:
    - >
      apt-get install --no-install-recommends -y
      binfmt-support ca-certificates debsums dosfstools fai-server fai-setup-storage make python3-pytest qemu-user-static qemu-utils sudo udev
    - |
      if [ "$CI_DISPOSABLE_ENVIRONMENT" ]; then
        # Some of our build environments run with SELinux enabled, make sure it is detected by all the tools
        if [ -d /sys/fs/selinux ]; then mount -t selinuxfs none /sys/fs/selinux; mkdir -p /etc/selinux; touch /etc/selinux/config; fi
      fi
    - >
      echo
      debian-cloud-images build
      --build-id ${CLOUD_IMAGE_BUILD_ID}
      --build-type dev
      --version ${CI_PIPELINE_IID}
      ${CLOUD_RELEASE} ${CLOUD_VENDOR} ${CLOUD_ARCH}
    - >
      ./bin/debian-cloud-images build
      --build-id ${CLOUD_IMAGE_BUILD_ID}
      --build-type dev
      ${CLOUD_RELEASE} ${CLOUD_VENDOR} ${CLOUD_ARCH}
    - 'xz -vk5T0 *.tar'
  artifacts:
    name: debian-${CLOUD_RELEASE}-${CLOUD_VENDOR}-${CLOUD_ARCH}
    expire_in: 7 days
    paths:
      - '*.build.json'
      - '*.info'
      - '*.tar.xz'
    reports:
      junit: '*.build.junit.xml'
  allow_failure: true

####
# Builds for developer uploads pushes
#
# Builds are run if
# - it is requested by setting $BUILD_AZURE, $BUILD_EC2, $BUILD_GCE, $BUILD_GENERIC or $BUILD_NOCLOUD or
# - the manual jobs are started.
####

.vagrant build:
  extends: .build
  rules:
  - if: '$CI_MERGE_REQUEST_ID == null && $BUILD_VAGRANT'
    when: on_success
  - if: '$CI_MERGE_REQUEST_ID == null'
    when: manual

vagrant stretch amd64 build:
  extends: .vagrant build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: stretch
    CLOUD_VENDOR: vagrant

vagrant buster amd64 build:
  extends: .vagrant build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: buster
    CLOUD_VENDOR: vagrant

vagrant bullseye amd64 build:
  extends: .vagrant build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: bullseye
    CLOUD_VENDOR: vagrant

vagrant sid amd64 build:
  extends: .vagrant build
  variables:
    CLOUD_ARCH: amd64
    CLOUD_RELEASE: sid
    CLOUD_VENDOR: vagrant
